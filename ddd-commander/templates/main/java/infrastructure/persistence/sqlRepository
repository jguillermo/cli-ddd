package <%= package %>;

import org.springframework.stereotype.Service;
import <%= packageDomain %>.<%= entityClass %>;
import <%= packageDomain %>.<%= entityIdClass %>;
import <%= packageDomain %>.<%= entityRepositoryClass %>;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public final class <%= className %> implements <%= entityRepositoryClass %> {
    private final <%= entityClass %>JpaRepository crudRepository;

    public <%= className %>(<%= entityClass %>JpaRepository crudRepository) {
        this.crudRepository = crudRepository;
    }

    @Override
    public void save(<%= entityClass %> <%= entityClassPropertie %>) {
        crudRepository.save(new <%= entityDaoClass %>(<%= entityClassPropertie %>));
    }

    @Override
    public void saveAll(List<<%= entityClass %>> list<%= entityClass %>) {
        Iterable<<%= entityDaoClass %>> iterables = list<%= entityClass %>.stream().map(<%= entityDaoClass %>::new).collect(Collectors.toList());
        crudRepository.saveAll(iterables);
    }

    @Override
    public Optional<<%= entityClass %>> findById(<%= entityIdClass %> id) {
        Optional<<%= entityDaoClass %>> entityDao = crudRepository.findById(id.value());
        return entityDao.map(<%= entityDaoClass %>::toDomain);
    }

    @Override
    public List<<%= entityClass %>> findAll() {
        return map(crudRepository.findAll());
    }

    @Override
    public List<<%= entityClass %>> findAllById(List<<%= entityIdClass %>> ids) {
        Iterable<String> iterables = ids.stream().map(<%= entityIdClass %>::value).collect(Collectors.toList());
        return map(crudRepository.findAllById(iterables));
    }

    @Override
    public void deleteById(<%= entityIdClass %> id) {
        crudRepository.deleteById(id.value());
    }

    private List<<%= entityClass %>> map(List<<%= entityDaoClass %>> list<%= entityDaoClass %>) {
        return list<%= entityDaoClass %>.stream().map(<%= entityDaoClass %>::toDomain).collect(Collectors.toList());
    }
}
