import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';
import { <%= classResultPersist %>, <%= classType %> } from './<%= fileType %>';
import { CommandBus, QueryBus } from '@nestjs/cqrs';
import { ResponseStatus } from '../../../share/application/applicationResponse';
import { StatusType } from '../../../share/app/status.type';
import { <%= classFindByIdDto %> } from '../../application/<%= fileFindByIdDto %>';
import { <%= classPersistDto %> } from '../../application/<%= filePersistDto %>';
import { <%= classDeleteDto %> } from '../../application/<%= fileDeleteDto %>';
import { <%= classListDto %> } from '../../application/<%= fileListDto %>';
import { <%= classAggregateResponse %> } from '../../application/<%= fileAggregateResponse %>';
import { <%= classListAggregateResponse %> } from '../../application/<%= fileListAggregateResponse %>';

@Resolver(() => <%= classType %>)
export class <%= className %> {
  constructor(private commandBus: CommandBus, private queryBus: QueryBus) {}

  @Query(() => [<%= classType %>], { name: '<%= aggregate.name.propertie %>List' })
  async list(@Args() args: <%= classListDto %>): Promise<<%= classAggregateResponse %>[]> {
    const data: <%= classListAggregateResponse %> = await this.queryBus.execute(args);
    return data.list;
  }

  @Query(() => <%= classType %>, { name: '<%= aggregate.name.propertie %>', nullable: true })
  async aggregate(@Args() args: <%= classFindByIdDto %>): Promise<<%= classAggregateResponse %> | null> {
    return await this.queryBus.execute(args);
  }

  @Mutation(() => <%= classResultPersist %>, { name: '<%= aggregate.name.propertie %>Persist' })
  async persist(@Args() args: <%= classPersistDto %>) {
    await this.commandBus.execute(args);
    return args.showEntity ? await this.queryBus.execute(new <%= classFindByIdDto %>(args.id)) : ResponseStatus.ok();
  }

  @Mutation(() => StatusType, { name: '<%= aggregate.name.propertie %>Delete' })
  async delete(@Args() args: <%= classDeleteDto %>): Promise<ResponseStatus> {
    await this.commandBus.execute(args);
    return ResponseStatus.ok();
  }
}
