import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { TestingE2eModule } from '../../testing-e2e-module';
import { <%= classRepository %> } from '../../../src/<%= aggregatePropertie %>/domain/<%= fileRepository %>';
import { <%= classMother %> } from '../<%= aggregatePropertie %>-object-mother';

describe('GraphQl <%= aggregate.name.value %> (<%= graphQlService %>)', () => {
  let app: INestApplication;
  let repository: <%= classRepository %>;
  beforeEach(async () => {
    ({ app, <%= aggregatePropertieRepository %>: repository } = await TestingE2eModule.create());
    const items = await repository.findAll();
    for await (const item of items) {
      await repository.deleteById(item.id);
    }
  });
  describe('create', () => {
    it('data ok return status', () => {
      const <%= aggregatePropertie %> = <%= classMother %>.create();
      const query = `
          mutation{
            <%= graphQlService %>(
              <%_ properties.forEach(function(e){ _%>
              <%= e.propertie.name.value %>: "${<%= aggregatePropertie %>.<%= e.propertie.name.value %>.value}"
              <%_ }); _%>
            ){
              ...on Status{
                status
              }
              ...on <%= aggregate.name.value %>{
                <%_ properties.forEach(function(e){ _%>
                <%= e.propertie.name.value %>
                <%_ }); _%>
              }
            }
          }
          `;
      return request(app.getHttpServer())
        .post(`/graphql`)
        .send({ query: query, variables: {} })
        .then(async (response) => {
          expect(response.body).toEqual({
            data: {
              <%= graphQlService %>: {
                status: 'ok',
              },
            },
          });
          const <%= aggregatePropertieDb %> = await repository.findById(<%= aggregatePropertieId %>);
          expect(<%= aggregatePropertieDb %>).not.toBeNull();
          <%_ properties.forEach(function(e){ _%>
          expect(<%= aggregatePropertieDb %>.<%= e.propertie.name.value %>.value).toEqual(<%= aggregatePropertie %>.<%= e.propertie.name.value %>.value);
          <%_ }); _%>
          expect(response.statusCode).toEqual(200);
        });
    });
  });

  describe('update', () => {
    it('data  ok return entity', async () => {
      const <%= aggregatePropertie %> = <%= classMother %>.create();
      await repository.persist(<%= aggregatePropertie %>);
      const query = `
          mutation{
            <%= graphQlService %>(
              <%_ properties.forEach(function(e){ _%>
              <%= e.propertie.name.value %>: "${<%= aggregatePropertie %>.<%= e.propertie.name.value %>.value}"
              <%_ }); _%>
              showEntity: true
            ){
              ...on Status{
                status
              }
              ...on <%= aggregate.name.value %>{
                <%_ properties.forEach(function(e){ _%>
                <%= e.propertie.name.value %>
                <%_ }); _%>
              }
            }
          }
          `;
      return request(app.getHttpServer())
        .post(`/graphql`)
        .send({ query: query, variables: {} })
        .then(async (response) => {
          expect(response.body).toEqual({
            data: {
              <%= graphQlService %>: {
                <%_ properties.forEach(function(e){ _%>
                <%= e.propertie.name.value %>: <%= aggregatePropertie %>.<%= e.propertie.name.value %>.value,
                <%_ }); _%>
              },
            },
          });
          const <%= aggregatePropertieDb %> = await repository.findById(<%= aggregatePropertieId %>);
          expect(<%= aggregatePropertieDb %>).not.toBeNull();
          <%_ properties.forEach(function(e){ _%>
          expect(<%= aggregatePropertieDb %>.<%= e.propertie.name.value %>.value).toEqual(<%= aggregatePropertie %>.<%= e.propertie.name.value %>.value);
          <%_ }); _%>
          expect(response.statusCode).toEqual(200);
        });
    });
  });
});
