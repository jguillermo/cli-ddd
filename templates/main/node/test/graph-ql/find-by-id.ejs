import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { <%= aggregate.name.value %>E2eModule } from './<%= aggregatePropertie %>-e2e-module';
import { <%= classRepository %> } from '../../../src/<%= aggregatePropertie %>/domain/<%= fileRepository %>';
import { <%= classMother %> } from '../<%= aggregatePropertie %>-object-mother';

describe('GraphQl <%= aggregate.name.value %> (<%= graphQlService %>)', () => {
  let app: INestApplication;
  let repository: <%= classRepository %>;
  beforeEach(async () => {
    ({ app, <%= aggregatePropertieRepository %>: repository } = await <%= aggregate.name.value %>E2eModule.create());
    const items = await repository.findAll();
    for await (const item of items) {
      await repository.deleteById(item.id);
    }
  });

  it('get', async () => {
    const <%= aggregatePropertie %> = <%= classMother %>.create();
    await repository.persist(<%= aggregatePropertie %>);
    const query = `
          query{
            <%= graphQlService %>(id: "${<%= aggregatePropertieId %>.value}"){
              id
              name
            }
          }
          `;
    return request(app.getHttpServer())
      .post(`/graphql`)
      .send({ query: query, variables: {} })
      .then(async (response) => {
        expect(response.body).toEqual({
          data: {
            <%= graphQlService %>: {
              <%_ properties.forEach(function(e){ _%>
              <%= e.propertie.name.value %>: <%= aggregatePropertie %>.<%= e.propertie.name.value %>.value,
              <%_ }); _%>
            },
          },
        });
        const <%= aggregatePropertieDb %> = await repository.findById(<%= aggregatePropertieId %>);
        expect(<%= aggregatePropertieDb %>).not.toBeNull();
        <%_ properties.forEach(function(e){ _%>
        expect(<%= aggregatePropertieDb %>.<%= e.propertie.name.value %>.value).toEqual(<%= aggregatePropertie %>.<%= e.propertie.name.value %>.value);
        <%_ }); _%>
        expect(response.statusCode).toEqual(200);
      });
  });

  it('get not exit', async () => {
    const <%= aggregatePropertie %> = <%= classMother %>.create();
    const query = `
          query{
            <%= graphQlService %>(id: "${<%= aggregatePropertieId %>.value}"){
              id
              name
            }
          }
          `;
    return request(app.getHttpServer())
      .post(`/graphql`)
      .send({ query: query, variables: {} })
      .then(async (response) => {
        expect(response.body).toEqual({
          data: {
            <%= graphQlService %>: null,
          },
        });
        const <%= aggregatePropertieDb %> = await repository.findById(<%= aggregatePropertieId %>);
        expect(<%= aggregatePropertieDb %>).toBeNull();
        expect(response.statusCode).toEqual(200);
      });
  });
});
