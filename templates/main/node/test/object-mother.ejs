import * as faker from 'faker';
import { <%= classAggregate %> } from '../../src/<%= propertieAggregate %>/domain/<%= fileAggregate %>';
<%_ properties.forEach(function(e){ _%>
<%_ if (e.primitivePropertie.type.isEnum) { _%>
import { Enum<%= e.propertie.className %>, <%= e.propertie.className %> } from '../../src/<%= propertieAggregate %>/domain/<%= e.file %>';
<%_ }else{ _%>
import { <%= e.propertie.className %> } from '../../src/<%= propertieAggregate %>/domain/<%= e.file %>';
<%_ } _%>
<%_ }); _%>

export interface <%= dataInterface %> {
  <%_ propertiesMother.forEach(function(e){ _%>
  <%= e.propertie %>?: <%= e.primitive %>;
  <%_ }); _%>
}
<%_ propertiesMother.forEach(function(e){ _%>

export class <%= e.className %> {
  static create(value?: <%= e.primitive %>): <%= e.classPropertie %> {
    <%_ if (e.isEnum) { _%>
    const <%= e.propertie %> = value
      ? value
      : faker.random.arrayElement(Object.keys(Enum<%= e.classPropertie %>).map((e) => Enum<%= e.classPropertie %>[e]));
    <%_ }else{ _%>
    const <%= e.propertie %> = value ? value : <%= e.faker %>();
    <%_ } _%>
    return new <%= e.classPropertie %>(<%= e.propertie %>);
  }
}
<%_ }); _%>

export class <%= classObjectMother %> {
  static create(data?: <%= dataInterface %>): <%= classAggregate %> {
    <%_ if (propertiesMotherStr.length<100) { _%>
    return new <%= classAggregate %>(<%= propertiesMotherStr %>);
    <%_ }else{ _%>
    return new <%= classAggregate %>(
      <%_ propertiesMother.forEach(function(e){ _%>
      <%= e.className %>.create(data?.<%= e.propertie %>),
      <%_ }); _%>
    );
    <%_ } _%>
  }
}
