import { Injectable } from '@nestjs/common';
import { EventBus } from '@nestjs/cqrs';
import { <%= classRepository %> } from '../../domain/<%= fileRepository %>';
import { <%= aggregate.name.value %> } from '../../domain/<%= fileAggregate %>';
<%_ properties.forEach(function(e){ _%>
import { <%= e.propertie.className %> } from '../../domain/<%= e.file %>';
<%_ }); _%>

@Injectable()
export class <%= className %> {
  constructor(private repository: <%= classRepository %>, private eventBus: EventBus) {}

  public async execute(<%= strVoProperties %>): Promise<void> {
    let <%= aggregate.name.propertie %> = await this.repository.findById(id);
    if (!<%= aggregate.name.propertie %>) {
      <%= aggregate.name.propertie %> = <%= aggregate.name.value %>.create(<%= strProperties %>);
    } else {
      <%= aggregate.name.propertie %>.update(<%= strPropertiesWitoutId %>);
    }
    await this.repository.persist(<%= aggregate.name.propertie %>);
    this.eventBus.publishAll(<%= aggregate.name.propertie %>.pullDomainEvents());
  }
}
