import { Injectable } from '@nestjs/common';
import { <%= classRepository %> } from '../../domain/<%= fileRepository %>';
<%_ properties.forEach(function(e){ _%>
import { <%= e.propertie.className %> } from '../../domain/<%= e.file %>';
<%_ }); _%>
import { <%= classResponse %> } from '../<%= fileResponse %>';

@Injectable()
export class <%= className %> {
  constructor(private repository: <%= classRepository %>) {}

  public async execute(<%= strVoProperties %>): Promise<<%= classResponse %> | null> {
    <%_ if (templateRender == "findById") { _%>
    const <%= aggregate.name.propertie %> = await this.repository.findById(id);
    if (!<%= aggregate.name.propertie %>) {
      return null;
    }
    return <%= classResponse %>.fromAggregate(<%= aggregate.name.propertie %>);
    <%_ } _%>
    <%_ if (templateRender == "list") { _%>
    const list<%= aggregate.name.value %> = await this.repository.find();
    return list<%= aggregate.name.value %>;
    <%_ } _%>
  }
}
