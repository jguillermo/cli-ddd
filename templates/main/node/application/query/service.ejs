import { Injectable } from '@nestjs/common';
import { <%= classRepository %> } from '../../domain/<%= fileRepository %>';
import { <%= classResponse %> } from '../<%= fileResponse %>';
<%_ if (templateRender === "findById") { _%>
<%_ properties.forEach(function(e){ _%>
import { <%= e.propertie.className %> } from '../../domain/aggregate/<%= e.file %>';
<%_ }); _%>
<%_ }else{ _%>
import { <%= classListResponse %> } from '../<%= fileListResponse %>';
import { FilterOpStr, OrderTypeImp, PaginatorTypeImp } from 'base-ddd';
import { <%= classDto %> } from './<%= fileDto %>';
<%_ } _%>

@Injectable()
export class <%= className %> {
  constructor(private repository: <%= classRepository %>) {}

  <%_ if (templateRender === "findById") { _%>
  public async execute(<%= strVoProperties %>): Promise<<%= classResponse %> | null> {
    const <%= aggregate.name.propertie %> = await this.repository.findById(id);
    if (!<%= aggregate.name.propertie %>) {
      return null;
    }
    return <%= classResponse %>.fromAggregate(<%= aggregate.name.propertie %>);
  }
  <%_ }else{ _%>
  public async execute(dto: <%= classDto %>, paginator: PaginatorTypeImp, order: OrderTypeImp): Promise<<%= classListResponse %>> {
    const list<%= aggregate.name.value %> = await this.repository.findAll(
      [
        <%_ properties.forEach(function(e){ _%>
        {
          field: '<%= e.propertie.name.value %>',
          opStr: FilterOpStr.EQUAL_TO,
          value: dto.<%= e.propertie.name.value %>,
        },
        <%_ }); _%>
      ],
      paginator,
      order,
    );
    return new <%= classListResponse %>(
      list<%= aggregate.name.value %>.map((<%= aggregate.name.propertie %>) => {
        return <%= classResponse %>.fromAggregate(<%= aggregate.name.propertie %>);
      }),
    );
  }
  <%_ } _%>
}
