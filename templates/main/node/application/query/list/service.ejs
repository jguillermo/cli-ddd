import { Injectable } from '@nestjs/common';
import { <%= classRepository %> } from '../../domain/<%= fileRepository %>';
import { <%= classResponse %> } from '../<%= fileResponse %>';
import { <%= classListResponse %> } from '../<%= fileListResponse %>';
<%_ if (hasPropertieDate) { _%>
import { DateTypeImp, FilterOpStr, OrderTypeImp, PaginatorTypeImp } from 'base-ddd';
<%_ }else{ _%>
import { FilterOpStr, OrderTypeImp, PaginatorTypeImp } from 'base-ddd';
<%_ } _%>
import { <%= classDto %> } from './<%= fileDto %>';

@Injectable()
export class <%= className %> {
  constructor(private repository: <%= classRepository %>) {}

  public async execute(
    dto: <%= classDto %>,
    paginator: PaginatorTypeImp,
    order: OrderTypeImp,
  ): Promise<<%= classListResponse %>> {
    const list<%= aggregate.name.value %> = await this.repository.findAll(
      [
        <%_ properties.forEach(function(e){ _%>
        {
          field: '<%= e.propertie.name.value %>',
          opStr: FilterOpStr.EQUAL_TO,
          <%_ if (e.primitivePropertie.type.isDate) { _%>
          value: dto.<%= e.propertie.name.value %> ? DateTypeImp.create(dto.<%= e.propertie.name.value %>).toString : null,
        <%_ }else{ _%>
          value: dto.<%= e.propertie.name.value %>,
          <%_ } _%>
        },
        <%_ }); _%>
      ],
      paginator,
      order,
    );
    return new <%= classListResponse %>(
      list<%= aggregate.name.value %>.map((<%= aggregate.name.propertie %>) => {
        return <%= classResponse %>.fromAggregate(<%= aggregate.name.propertie %>);
      }),
    );
  }
}
