import { EnumType } from 'base-ddd';

export enum Enum<%= className %> {
  <%_ enumValues.forEach(function(enumValue){ _%>
  <%= enumValue %> = '<%= enumValue %>',
  <%_ }); _%>
}

export class <%= className %> extends EnumType<string> {
  protected _enum = Enum<%= className %>;
  get enum() {
    return this._enum;
  }

  <%_ if (propertie.propertie.required.value) { _%>
  isValid(): boolean {
    if (this.isNull) {
      throw new Error('is required.');
    }
    return true;
  }
  <%_ } _%>

  public validValue(value: string): boolean {
    return Object.keys(Enum<%= className %>)
      .map((e) => Enum<%= className %>[e])
      .includes(value);
  }
}
